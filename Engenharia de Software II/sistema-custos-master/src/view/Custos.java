/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controllers.CustosDiretosController;
import controllers.CustosIndiretosController;
import controllers.DespesasFixasController;
import controllers.DespesasVariaveisController;
import controllers.ProducaoMesController;
import controllers.ReceitaController;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import models.GravarAlteracoes;
import models.LerAlteracoes;
import models.TabelaCustosDiretos;
import models.TabelaCustosIndiretos;
import models.TabelaDespesasFixas;
import models.TabelaDespesasVariaveis;
import models.TabelaProducaoMes;
import models.TabelaReceita;
import models.TableModelCustosDiretos;
import models.TableModelCustosIndiretos;
import models.TableModelDespesasFixas;
import models.TableModelDespesasVariaveis;
import models.TableModelProducaoMes;
import models.TableModelReceita;

/**
 *
 * @author Rodrigo Lima
 */
public class Custos extends javax.swing.JFrame {

    /**
     * Creates new form Custos
     */
    
    TableModelReceita tableModelR = new TableModelReceita();
    TableModelProducaoMes tableModelPM = new TableModelProducaoMes();
    TableModelCustosIndiretos tableModelCI = new TableModelCustosIndiretos();
    TableModelCustosDiretos tableModelCD = new TableModelCustosDiretos();
    TableModelDespesasVariaveis tableModelDV = new TableModelDespesasVariaveis();
    TableModelDespesasFixas tableModelDF = new TableModelDespesasFixas();
    public Custos() throws IOException {
        initComponents();
        modelTabelas();
        this.setTitle("Custos");
        ImageIcon icone = new ImageIcon("icone.png");
        setIconImage(icone.getImage());
        lerAlteracoes();
        botaoEnter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campoProduto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoQtdV = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        campoPUn = new javax.swing.JTextField();
        botaoCadastrar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaReceita = new javax.swing.JTable();
        comboCustosIndiretos = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaCustosIndiretos = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaProducaoMes = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaCustosDiretos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        totalReceita = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        campoQtdP = new javax.swing.JTextField();
        totalCustos = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabelaDespesasFixas = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabelaDespesasVariaveis = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        comboDespesasFixas = new javax.swing.JComboBox<>();
        totalDespesas = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        botaoAlterar = new javax.swing.JButton();
        botaoExcluir = new javax.swing.JButton();
        botaoDetalhes = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        botaoLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Custos Diretos/Variáveis");

        jLabel2.setText("Produto");

        jLabel3.setText("Quantidade vendida");

        jLabel4.setText("Preço de venda unitário");

        botaoCadastrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoCadastrar.setText("Cadastrar");
        botaoCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCadastrarActionPerformed(evt);
            }
        });

        tabelaReceita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaReceita);

        comboCustosIndiretos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Água utilizada", "Aluguel", "Amortização", "Depreciação", "Energia elétrica", "Manutenção", "Mão de obra indireta ", "Materiais diversos", "Seguros contratados", "Outros" }));
        comboCustosIndiretos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCustosIndiretosActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tabelaCustosIndiretos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelaCustosIndiretos);

        tabelaProducaoMes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tabelaProducaoMes);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Produção do mês");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Custos indiretos");

        tabelaCustosDiretos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tabelaCustosDiretos);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Receita de vendas");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Despesas operacionais do período");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        totalReceita.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalReceita.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalReceita.setText("Receita Total - > 0");

        jLabel9.setText("Quantidade produzida");

        totalCustos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalCustos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalCustos.setText("Total Custos - > 0");

        tabelaDespesasFixas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tabelaDespesasFixas);

        tabelaDespesasVariaveis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(tabelaDespesasVariaveis);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Despesas Variáveis");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Despesas Fixas");

        comboDespesasFixas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Água utilizada", "Aluguel", "Amortização", "Depreciação", "Energia elétrica", "Manutenção", "Mão de obra indireta ", "Materiais diversos", "Seguros contratados", "Outros" }));
        comboDespesasFixas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDespesasFixasActionPerformed(evt);
            }
        });

        totalDespesas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalDespesas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalDespesas.setText("Total Despesas - > 0");

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        botaoAlterar.setBackground(new java.awt.Color(184, 184, 238));
        botaoAlterar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoAlterar.setText("Alterar");
        botaoAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarActionPerformed(evt);
            }
        });

        botaoExcluir.setBackground(new java.awt.Color(231, 175, 186));
        botaoExcluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoExcluir.setText("Excluir");
        botaoExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirActionPerformed(evt);
            }
        });

        botaoDetalhes.setBackground(new java.awt.Color(227, 253, 242));
        botaoDetalhes.setText("Mais detalhes");
        botaoDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDetalhesActionPerformed(evt);
            }
        });

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("(Selecione uma célula)");

        botaoLimpar.setBackground(new java.awt.Color(231, 175, 186));
        botaoLimpar.setText("Limpar tudo");
        botaoLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                                .addComponent(totalCustos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(botaoLimpar))
                        .addGap(46, 46, 46)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                            .addComponent(comboDespesasFixas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(163, 163, 163)
                                        .addComponent(totalDespesas, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(botaoDetalhes, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)))
                                .addGap(2, 2, 2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(campoQtdP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(10, 10, 10)
                                            .addComponent(campoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(49, 49, 49)
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(campoQtdV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(campoPUn)
                                        .addComponent(botaoCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(totalReceita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(botaoAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(botaoExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jSeparator1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(comboCustosIndiretos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(6, 6, 6))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(jLabel2))
                                            .addComponent(campoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(campoQtdV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3)))
                                        .addGap(14, 14, 14)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(campoQtdP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(campoPUn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(10, 10, 10)
                                        .addComponent(botaoCadastrar)
                                        .addGap(1, 1, 1)))
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(totalReceita))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(4, 4, 4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(botaoExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                            .addComponent(botaoAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(14, 14, 14)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboCustosIndiretos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel8)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboDespesasFixas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(totalDespesas)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(botaoDetalhes)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalCustos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(botaoLimpar)
                                .addContainerGap())
                            .addComponent(jSeparator3)))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCadastrarActionPerformed
        try{
            adicionarProduto();
        } catch (NumberFormatException ex) { 
            JOptionPane.showMessageDialog(null, "Campos inválidos", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        somaReceita();
        somaDespesas();
        somaCustos();
        GravarAlteracoes g = new GravarAlteracoes();
        try {
            g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
        } catch (IOException ex) {
            Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
        }
        campoProduto.setText("");
        campoQtdV.setText("");
        campoPUn.setText("");
        campoQtdP.setText("");
    }//GEN-LAST:event_botaoCadastrarActionPerformed

    private void comboCustosIndiretosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCustosIndiretosActionPerformed
        if (comboCustosIndiretos.getSelectedIndex() == 9){
            adicionarCustoOutros();          
        } else {
            adicionarCustoCombo();
        }
        GravarAlteracoes g = new GravarAlteracoes();
        try {
            g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
        } catch (IOException ex) {
            Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
        }
        somaCustos();
    }//GEN-LAST:event_comboCustosIndiretosActionPerformed

    private void comboDespesasFixasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDespesasFixasActionPerformed
        if (comboDespesasFixas.getSelectedIndex() == 9){
            adicionarDespesaOutros();          
        } else {
            adicionarDespesaCombo();
        }
        GravarAlteracoes g = new GravarAlteracoes();
        try {
            g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
        } catch (IOException ex) {
            Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
        }
        somaDespesas();
    }//GEN-LAST:event_comboDespesasFixasActionPerformed

    private void botaoAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlterarActionPerformed
        if(tabelaReceita.getSelectedRow() == -1 && tabelaProducaoMes.getSelectedRow() == -1 && tabelaCustosIndiretos.getSelectedRow() == -1 && tabelaCustosDiretos.getSelectedRow() == -1 && tabelaDespesasVariaveis.getSelectedRow() == -1 && tabelaDespesasFixas.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "Selecione uma célula", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                String Valor;
                Valor = (JOptionPane.showInputDialog("Novo valor: "));
                if (Valor == null){
                    return;
                }
                if (!Valor.startsWith("-")){
                    if(tabelaReceita.getSelectedRow() != -1){
                        if (tabelaReceita.getSelectedColumn() == 1){
                            if (Integer.parseInt(Valor) > (int)tabelaProducaoMes.getValueAt(tabelaReceita.getSelectedRow(), 1)){
                                JOptionPane.showMessageDialog(null, "Valores Inválidos (Quantidade vendida não pode ser maior que quantidade produzida)", "Erro", JOptionPane.ERROR_MESSAGE);
                            } else {
                                tableModelR.setValueAt(Valor, tabelaReceita.getSelectedRow(), tabelaReceita.getSelectedColumn());
                            }
                        } else {
                            tableModelR.setValueAt(Valor, tabelaReceita.getSelectedRow(), tabelaReceita.getSelectedColumn());
                        }
                    }
                    if(tabelaProducaoMes.getSelectedRow() != -1){
                        if (tabelaProducaoMes.getSelectedColumn() == 1){
                            if (Integer.parseInt(Valor) < (int)tabelaReceita.getValueAt(tabelaProducaoMes.getSelectedRow(), 1)){
                                JOptionPane.showMessageDialog(null, "Valores Inválidos (Quantidade vendida não pode ser maior que quantidade produzida)", "Erro", JOptionPane.ERROR_MESSAGE);
                            } else {
                                tableModelPM.setValueAt(Valor, tabelaProducaoMes.getSelectedRow(), tabelaProducaoMes.getSelectedColumn());
                            }
                        } else {
                            tableModelPM.setValueAt(Valor, tabelaProducaoMes.getSelectedRow(), tabelaProducaoMes.getSelectedColumn());
                        }
                    }
                    if(tabelaCustosIndiretos.getSelectedRow() != -1){
                        tableModelCI.setValueAt(Valor, tabelaCustosIndiretos.getSelectedRow(), tabelaCustosIndiretos.getSelectedColumn());
                    }
                    if(tabelaCustosDiretos.getSelectedRow() != -1){
                        tableModelCD.setValueAt(Valor, tabelaCustosDiretos.getSelectedRow(), tabelaCustosDiretos.getSelectedColumn());
                    }
                    if(tabelaDespesasVariaveis.getSelectedRow() != -1){
                        tableModelDV.setValueAt(Valor, tabelaDespesasVariaveis.getSelectedRow(), tabelaDespesasVariaveis.getSelectedColumn());
                    }
                    if(tabelaDespesasFixas.getSelectedRow() != -1){
                        tableModelDF.setValueAt(Valor, tabelaDespesasFixas.getSelectedRow(), tabelaDespesasFixas.getSelectedColumn());
                    }
                    GravarAlteracoes g = new GravarAlteracoes();
                    try {
                        g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
                    } catch (IOException ex) {
                        Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    somaCustos();
                    somaDespesas();
                    somaReceita();
                } else {
                    JOptionPane.showMessageDialog(null, "Apenas valores positivos.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botaoAlterarActionPerformed

    private void botaoExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirActionPerformed
        if(tabelaReceita.getSelectedRow() == -1 && tabelaProducaoMes.getSelectedRow() == -1 && tabelaCustosIndiretos.getSelectedRow() == -1 && tabelaCustosDiretos.getSelectedRow() == -1 && tabelaDespesasVariaveis.getSelectedRow() == -1 && tabelaDespesasFixas.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "Selecione uma célula", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        if(tabelaReceita.getSelectedRow() != -1){
            tableModelPM.removeRow(tabelaReceita.getSelectedRow());
            tableModelCD.removeRow(tabelaReceita.getSelectedRow());
            tableModelDV.removeRow(tabelaReceita.getSelectedRow());
            tableModelR.removeRow(tabelaReceita.getSelectedRow());
        }
        if(tabelaProducaoMes.getSelectedRow() != -1){
            tableModelCD.removeRow(tabelaProducaoMes.getSelectedRow());
            tableModelDV.removeRow(tabelaProducaoMes.getSelectedRow());
            tableModelR.removeRow(tabelaProducaoMes.getSelectedRow());
            tableModelPM.removeRow(tabelaProducaoMes.getSelectedRow());
        }
        if(tabelaCustosIndiretos.getSelectedRow() != -1){
            tableModelCI.removeRow(tabelaCustosIndiretos.getSelectedRow());
        }
        if(tabelaCustosDiretos.getSelectedRow() != -1){
            tableModelPM.removeRow(tabelaCustosDiretos.getSelectedRow());
            tableModelDV.removeRow(tabelaCustosDiretos.getSelectedRow());
            tableModelR.removeRow(tabelaCustosDiretos.getSelectedRow());
            tableModelCD.removeRow(tabelaCustosDiretos.getSelectedRow());
        } 
        if(tabelaDespesasVariaveis.getSelectedRow() != -1){
            tableModelPM.removeRow(tabelaDespesasVariaveis.getSelectedRow());
            tableModelCD.removeRow(tabelaDespesasVariaveis.getSelectedRow());
            tableModelR.removeRow(tabelaDespesasVariaveis.getSelectedRow());
            tableModelDV.removeRow(tabelaDespesasVariaveis.getSelectedRow());
        } 
        if(tabelaDespesasFixas.getSelectedRow() != -1){
            tableModelDF.removeRow(tabelaDespesasFixas.getSelectedRow());
        }
        GravarAlteracoes g = new GravarAlteracoes();
        try {
            g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
        } catch (IOException ex) {
            Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
        }
        somaCustos();
        somaDespesas();
        somaReceita();
    }//GEN-LAST:event_botaoExcluirActionPerformed

    private void botaoDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDetalhesActionPerformed
        try{
            String produto[] = new String[tabelaReceita.getRowCount()];
            double valores[][] = new double[produto.length][5];
            double dreV[] = new double[7];
            int qtdV[] = new int [produto.length];
            for (int i = 0; i < tabelaReceita.getRowCount(); i++){
                produto[i] = (String) tabelaReceita.getValueAt(i, 0);
                valores[i][0] = (double) tabelaCustosDiretos.getValueAt(i, 4);
                BigDecimal bd1 = new BigDecimal(((double) tabelaCustosDiretos.getValueAt(i, 4)) / somaCustosDiretos()).setScale(2, RoundingMode.HALF_EVEN);
                valores[i][1] = bd1.doubleValue();
                BigDecimal bd2 = new BigDecimal(somaCustosIndiretos() * valores[i][1]).setScale(2, RoundingMode.HALF_EVEN);
                valores[i][2] = bd2.doubleValue();
                valores[i][3] = valores[i][0] + valores[i][2];
                BigDecimal bd4 = new BigDecimal(valores[i][3] / (int) tabelaProducaoMes.getValueAt(i, 1)).setScale(2, RoundingMode.HALF_EVEN);
                valores[i][4] = bd4.doubleValue();
                qtdV[i] = (int) tabelaReceita.getValueAt(i, 1);
            }
            dreV[0] = somaReceita();
            dreV[1] = dreV[0] * 0.15;
            dreV[2] = dreV[0] - dreV[1];
            dreV[3] = somaCustos();
            dreV[4] = dreV[2] - dreV[3];
            dreV[5] = somaDespesas();
            dreV[6] = dreV[4] - dreV[5];
//        Object valueAt = tabelaReceita.getValueAt(0, 0);
//        (String)sua_tabela.getValueAt(sua_tabela.getSelectedRow(), 0);
//        String produto = (String) valueAt;
        Detalhes detalhes = new Detalhes(produto, valores, qtdV, dreV);
        detalhes.setVisible(true);
        }catch(IOException e){
                
        }
    }//GEN-LAST:event_botaoDetalhesActionPerformed

    private void botaoLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir todas as células?", "ATENCAO", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            int ate = tabelaReceita.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelR.removeRow(0);

            ate = tabelaProducaoMes.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelPM.removeRow(0);

            ate = tabelaCustosIndiretos.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelCI.removeRow(0);

            ate = tabelaCustosDiretos.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelCD.removeRow(0);

            ate = tabelaDespesasVariaveis.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelDV.removeRow(0);

            ate = tabelaDespesasFixas.getRowCount();
            for(int i = 0; i < ate; i++)
                tableModelDF.removeRow(0);
            
            somaCustos();
            somaDespesas();
            somaReceita();
            GravarAlteracoes g = new GravarAlteracoes();
            try {
                g.gravarAlteracoes(tabelaReceita, tabelaProducaoMes, tabelaCustosIndiretos, tabelaCustosDiretos, tabelaDespesasVariaveis, tabelaDespesasFixas);
            } catch (IOException ex) {
                Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            
        }
    }//GEN-LAST:event_botaoLimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Custos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Custos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Custos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Custos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Custos().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Custos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlterar;
    private javax.swing.JButton botaoCadastrar;
    private javax.swing.JButton botaoDetalhes;
    private javax.swing.JButton botaoExcluir;
    private javax.swing.JButton botaoLimpar;
    private javax.swing.JTextField campoPUn;
    private javax.swing.JTextField campoProduto;
    private javax.swing.JTextField campoQtdP;
    private javax.swing.JTextField campoQtdV;
    private javax.swing.JComboBox<String> comboCustosIndiretos;
    private javax.swing.JComboBox<String> comboDespesasFixas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable tabelaCustosDiretos;
    private javax.swing.JTable tabelaCustosIndiretos;
    private javax.swing.JTable tabelaDespesasFixas;
    private javax.swing.JTable tabelaDespesasVariaveis;
    private javax.swing.JTable tabelaProducaoMes;
    private javax.swing.JTable tabelaReceita;
    private javax.swing.JLabel totalCustos;
    private javax.swing.JLabel totalDespesas;
    private javax.swing.JLabel totalReceita;
    // End of variables declaration//GEN-END:variables

    private double somaReceita() {
        double soma = 0;
        for (int i=0; i<tabelaReceita.getRowCount(); i++) {
            double valor = (double) tabelaReceita.getValueAt(i, 3);
            soma += valor;
        }
        if (soma == 0){
            totalReceita.setText("");
        } else {
            DecimalFormat df = new DecimalFormat("R$ #,###.00");
            totalReceita.setText(String.valueOf("Total Receita -> " +(df.format(soma))));
        }
        return soma;
    }

    private void adicionarProduto() {
        boolean checkIfExists = false;
        for (int i=0; i < tabelaReceita.getRowCount(); i++) {
            if (tabelaReceita.getValueAt(i, 0).equals(campoProduto.getText())){
                checkIfExists = true;
            }
        }
        if (checkIfExists == true){
            JOptionPane.showMessageDialog(null, "Produto já existe na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (campoProduto.getText().equals("") || campoQtdV.getText().equals("") || campoQtdP.getText().equals("") || campoPUn.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Valores Inválidos (Campos em Branco)", "Erro", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(campoQtdV.getText()) > Integer.parseInt(campoQtdP.getText())){
            JOptionPane.showMessageDialog(null, "Valores Inválidos (Quantidade vendida não pode ser maior que quantidade produzida)", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            ReceitaController rc = new ReceitaController();
            TabelaReceita r = new TabelaReceita();
            r = rc.adicionarValor(campoProduto.getText(), (Integer.parseInt(campoQtdV.getText())), (Double.parseDouble(campoPUn.getText())), 0, r);
            
            ProducaoMesController pm = new ProducaoMesController();
            TabelaProducaoMes p = new TabelaProducaoMes();
            p = pm.adicionarValor(campoProduto.getText(), (Integer.parseInt(campoQtdP.getText())), p);
            
            CustosDiretosController cd = new CustosDiretosController();
            TabelaCustosDiretos c = new TabelaCustosDiretos();
            double materiaPrima, maoDeObraD, embalagem, totalCd;
            try{
                materiaPrima = Double.parseDouble(JOptionPane.showInputDialog("Custo com matéria prima: "));
                maoDeObraD = Double.parseDouble(JOptionPane.showInputDialog("Custo com mão de obra direta: "));
                embalagem = Double.parseDouble(JOptionPane.showInputDialog("Custo com embalagem: "));
                totalCd = materiaPrima + maoDeObraD + embalagem;
                c = cd.adicionarValor(campoProduto.getText(), c, materiaPrima, maoDeObraD, embalagem, totalCd);

                DespesasVariaveisController dv = new DespesasVariaveisController();
                TabelaDespesasVariaveis d = new TabelaDespesasVariaveis();
                double despesasVariaveis;
                despesasVariaveis = Double.parseDouble(JOptionPane.showInputDialog("Despesas variáveis por unidade vendida: "));
                d = dv.adicionarValor(campoProduto.getText(), d, despesasVariaveis, (Integer.parseInt(campoQtdV.getText()))); //*


                tableModelR.addRow(r);
                tableModelPM.addRow(p);
                tableModelCD.addRow(c);
                tableModelDV.addRow(d);
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException ex){
                return;
            }
        }
    }

    private double somaCustos() {
        double soma = 0;
        for (int i=0; i<tabelaCustosIndiretos.getRowCount(); i++) {
            double valor = (double) tabelaCustosIndiretos.getValueAt(i, 1);
            soma += valor;
        }
        for (int i=0; i<tabelaCustosDiretos.getRowCount(); i++) {
            double valor = (double) tabelaCustosDiretos.getValueAt(i, 4);
            soma += valor;
        }
        if (soma == 0){
            totalCustos.setText("");
        } else {
            DecimalFormat df = new DecimalFormat("R$ #,###.00");
            totalCustos.setText(String.valueOf("Total Custos -> " +df.format(soma)));
        }
        return soma;
    }

    private void adicionarCustoOutros() {
        String nomeCusto;
        nomeCusto = JOptionPane.showInputDialog("Nome do custo: ");
        if (nomeCusto == null){
            return;
        }
        boolean checkIfExists = false;
        for (int i=0; i < tabelaCustosIndiretos.getRowCount(); i++) {
            if (tabelaCustosIndiretos.getValueAt(i, 0).equals(nomeCusto)){
                checkIfExists = true;
            }
        }
        if (checkIfExists == true){
            JOptionPane.showMessageDialog(null, "Custo já existe na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            CustosIndiretosController ci = new CustosIndiretosController();
            TabelaCustosIndiretos c = new TabelaCustosIndiretos();
            double valorCusto;
            try{
                valorCusto = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do custo: "));
                c = ci.adicionarValor(nomeCusto, valorCusto, c);
                tableModelCI.addRow(c);
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException ex){
                return;
            }
        }
    }

    private void adicionarCustoCombo() {
        boolean checkIfExists = false;
        for (int i=0; i < tabelaCustosIndiretos.getRowCount(); i++) {
            if (tabelaCustosIndiretos.getValueAt(i, 0).equals(comboCustosIndiretos.getSelectedItem())){
                checkIfExists = true;
            }
        }
        if (checkIfExists == true){
            JOptionPane.showMessageDialog(null, "Custo já existe na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            CustosIndiretosController ci = new CustosIndiretosController();
            TabelaCustosIndiretos c = new TabelaCustosIndiretos();
            double valorCusto;
            try{
                valorCusto = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do custo: "));
                c = ci.adicionarValor((String) comboCustosIndiretos.getSelectedItem(), valorCusto, c);
                tableModelCI.addRow(c);
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException ex){
                return;
            }
        }
    }

    private void adicionarDespesaOutros() {
        String nomeDespesa;
        nomeDespesa = JOptionPane.showInputDialog("Nome do custo: ");
        if (nomeDespesa == null){
            return;
        }
        boolean checkIfExists = false;
        for (int i=0; i < tabelaDespesasFixas.getRowCount(); i++) {
            if (tabelaDespesasFixas.getValueAt(i, 0).equals(nomeDespesa)){
                checkIfExists = true;
            }
        }
        if (checkIfExists == true){
            JOptionPane.showMessageDialog(null, "Despesa já existe na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            DespesasFixasController df = new DespesasFixasController();
            TabelaDespesasFixas d = new TabelaDespesasFixas();
            double valorDespesa;
            try{
                valorDespesa = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor da despesa: "));
                d = df.adicionarValor(nomeDespesa , valorDespesa, d);
                tableModelDF.addRow(d);
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException ex){
                return;
            }
        }
    }

    private void adicionarDespesaCombo() {
        boolean checkIfExists = false;
        for (int i=0; i < tabelaDespesasFixas.getRowCount(); i++) {
            if (tabelaDespesasFixas.getValueAt(i, 0).equals(comboDespesasFixas.getSelectedItem())){
                checkIfExists = true;
            }
        }
        if (checkIfExists == true){
            JOptionPane.showMessageDialog(null, "Despesa já existe na tabela", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            DespesasFixasController df = new DespesasFixasController();
            TabelaDespesasFixas d = new TabelaDespesasFixas();
            double valorDespesa = 0;
            try{
                valorDespesa = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor da despesa: "));
                d = df.adicionarValor((String) comboDespesasFixas.getSelectedItem(), valorDespesa, d);
                tableModelDF.addRow(d);
            } catch (NumberFormatException ex) { 
                JOptionPane.showMessageDialog(null, "Apenas números.", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException ex){
                return;
            }
        }
    }

    private double somaDespesas() {
        double soma = 0;
        for (int i=0; i<tabelaDespesasVariaveis.getRowCount(); i++) {
            double valor = (double) tabelaDespesasVariaveis.getValueAt(i, 1);
            soma += valor;
        }
        for (int i=0; i<tabelaDespesasFixas.getRowCount(); i++) {
            double valor = (double) tabelaDespesasFixas.getValueAt(i, 1);
            soma += valor;
        }
        if (soma == 0){
            totalDespesas.setText("");
        } else {
            DecimalFormat df = new DecimalFormat("R$ #,###.00");
            totalDespesas.setText(String.valueOf("Total Despesas -> " +df.format(soma)));
        }
        return soma;
    }

    private void modelTabelas() {
        tabelaReceita.setModel(tableModelR);
        tabelaReceita.getColumnModel().getColumn(1).setPreferredWidth(50);
        tabelaReceita.getColumnModel().getColumn(2).setPreferredWidth(50);
        tabelaReceita.getColumnModel().getColumn(3).setPreferredWidth(50);
        tabelaProducaoMes.setModel(tableModelPM);
        tabelaProducaoMes.getColumnModel().getColumn(1).setPreferredWidth(5);
        tabelaCustosIndiretos.setModel(tableModelCI);
        tabelaCustosIndiretos.getColumnModel().getColumn(1).setPreferredWidth(5);
        tabelaCustosDiretos.setModel(tableModelCD);
        tabelaCustosDiretos.getColumnModel().getColumn(4).setPreferredWidth(5);
        tabelaCustosDiretos.getColumnModel().getColumn(3).setPreferredWidth(20);
        tabelaCustosDiretos.getColumnModel().getColumn(2).setPreferredWidth(34);
        tabelaCustosDiretos.getColumnModel().getColumn(1).setPreferredWidth(30);
        tabelaDespesasVariaveis.setModel(tableModelDV);
        tabelaDespesasVariaveis.getColumnModel().getColumn(1).setPreferredWidth(1);
        tabelaDespesasFixas.setModel(tableModelDF);
        tabelaDespesasFixas.getColumnModel().getColumn(1).setPreferredWidth(1);
        tabelaReceita.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaReceita.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaReceita.setCellSelectionEnabled(true);
        tabelaProducaoMes.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaProducaoMes.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaProducaoMes.setCellSelectionEnabled(true);
        tabelaCustosIndiretos.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaCustosIndiretos.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaCustosIndiretos.setCellSelectionEnabled(true);
        tabelaCustosDiretos.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaCustosDiretos.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaCustosDiretos.setCellSelectionEnabled(true);
        tabelaDespesasVariaveis.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaDespesasVariaveis.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaDespesasVariaveis.setCellSelectionEnabled(true);
        tabelaDespesasFixas.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaDespesasFixas.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaDespesasFixas.setCellSelectionEnabled(true);
    }

    private void lerAlteracoes() throws IOException {
        String fileReceita = "gravacaoReceita.txt";
        BufferedReader readerReceita = new BufferedReader(new FileReader(fileReceita));
        
        LineNumberReader lerLinhasR = new LineNumberReader(new FileReader(fileReceita));
        lerLinhasR.skip(Long.MAX_VALUE);
        int qtLinhas = lerLinhasR.getLineNumber();
        for(int i = 0; i < (qtLinhas / 4); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaReceita r = new TabelaReceita();
            r = l.lerAlteracoesReceita(readerReceita, r);
            tableModelR.addRow(r);
        }
        readerReceita.close();
        
        String fileProducao = "gravacaoProducao.txt";
        BufferedReader readerProducao = new BufferedReader(new FileReader(fileProducao));
        
        LineNumberReader lerLinhasP = new LineNumberReader(new FileReader(fileProducao));
        lerLinhasP.skip(Long.MAX_VALUE);
        qtLinhas = lerLinhasP.getLineNumber();
        for(int i = 0; i < (qtLinhas / 2); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaProducaoMes p = new TabelaProducaoMes();
            p = l.lerAlteracoesProducao(readerProducao, p);
            tableModelPM.addRow(p);
        }
        readerProducao.close();
        
        String fileCustosIndiretos = "gravacaoCustosIndiretos.txt";
        BufferedReader readerCustosIndiretos = new BufferedReader(new FileReader(fileCustosIndiretos));
        
        LineNumberReader lerLinhasCI = new LineNumberReader(new FileReader(fileCustosIndiretos));
        lerLinhasCI.skip(Long.MAX_VALUE);
        qtLinhas = lerLinhasCI.getLineNumber();
        for(int i = 0; i < (qtLinhas / 2); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaCustosIndiretos ci = new TabelaCustosIndiretos();
            ci = l.lerAlteracoesCustosIndiretos(readerCustosIndiretos, ci);
            tableModelCI.addRow(ci);
        }
        readerCustosIndiretos.close();
        
        String fileCustosDiretos = "gravacaoCustosDiretos.txt";
        BufferedReader readerCustosDiretos = new BufferedReader(new FileReader(fileCustosDiretos));
        
        LineNumberReader lerLinhasCD = new LineNumberReader(new FileReader(fileCustosDiretos));
        lerLinhasCD.skip(Long.MAX_VALUE);
        qtLinhas = lerLinhasCD.getLineNumber();
        for(int i = 0; i < (qtLinhas / 5); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaCustosDiretos cd = new TabelaCustosDiretos();
            cd = l.lerAlteracoesCustosDiretos(readerCustosDiretos, cd);
            tableModelCD.addRow(cd);
        }
        readerCustosDiretos.close();
        
        String fileDespesasVariaveis = "gravacaoDespesasVariaveis.txt";
        BufferedReader readerDespesasVariaveis = new BufferedReader(new FileReader(fileDespesasVariaveis));
        
        LineNumberReader lerLinhasDV = new LineNumberReader(new FileReader(fileDespesasVariaveis));
        lerLinhasDV.skip(Long.MAX_VALUE);
        qtLinhas = lerLinhasDV.getLineNumber();
        for(int i = 0; i < (qtLinhas / 2); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaDespesasVariaveis dv = new TabelaDespesasVariaveis();
            dv = l.lerAlteracoesDespesasVariaveis(readerDespesasVariaveis, dv);
            tableModelDV.addRow(dv);
        }
        readerDespesasVariaveis.close();
        
        String fileDespesasFixas = "gravacaoDespesasFixas.txt";
        BufferedReader readerDespesasFixas = new BufferedReader(new FileReader(fileDespesasFixas));
        
        LineNumberReader lerLinhasDF = new LineNumberReader(new FileReader(fileDespesasFixas));
        lerLinhasDF.skip(Long.MAX_VALUE);
        qtLinhas = lerLinhasDF.getLineNumber();
        for(int i = 0; i < (qtLinhas / 2); i ++){
            LerAlteracoes l = new LerAlteracoes();
            TabelaDespesasFixas df = new TabelaDespesasFixas();
            df = l.lerAlteracoesDespesasFixas(readerDespesasFixas, df);
            tableModelDF.addRow(df);
        }
        readerDespesasFixas.close();
        somaCustos();
        somaDespesas();
        somaReceita();
    }

    private double somaCustosDiretos() {
        double somaCustosDiretos = 0;
        for (int i=0; i<tabelaCustosDiretos.getRowCount(); i++) {
          double valor = (double) tabelaCustosDiretos.getValueAt(i, 4);
          somaCustosDiretos += valor;
        }
        return somaCustosDiretos;
    }

    private double somaCustosIndiretos() {
        double somaCustosIndiretos = 0;
        for (int i=0; i<tabelaCustosIndiretos.getRowCount(); i++) {
            double valor = (double) tabelaCustosIndiretos.getValueAt(i, 1);
            somaCustosIndiretos += valor;
        }
        return somaCustosIndiretos;
    }

    private void botaoEnter() {
        InputMap inputMap = this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),"forward");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("forward", new AbstractAction(){
        private static final long serialVersionUID = 1L;

        @Override
        public void actionPerformed(ActionEvent arg0) {
            botaoCadastrar.doClick();
        }
            
        });
    }
    
}